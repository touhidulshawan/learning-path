#+title: SQL Injection
#+description: Notes from learning about SQL Injection attack <- Portswigger Learning Path
#+author:[[https://github.com/touhidulshawan][Touhidul Shawan]] 

* What is SQL Injection Attack?
A web security vulnerability that allows an attacker to interfere with the queries that an application makes to it's database

- modify or delete data
- compromise underlying server or any other back-end infrastructure
- perform denial-of-service aka ~DOS~

* Impact of successfull attack
+ unauthorized access
+ personal user information like password, credit card details
+ persistent backdoor into organization's systems

* Detect SQL Injection Attack 
+ Submitting the single quote character ~'~ and looking for errors other other anomalies
+ Submitting some SQL specific syntax that evaluates to the base value of the entry point, and to a different value, and looking for systematic differences in the resulting application response
+ Submitting Boolean conditions such as ~OR 1=1~ and ~OR 1=2~ and looking for differences
+ Time delays payloads
+ OAST payloads

* SQL Injection in different parts of the query
Most SQL Injection vulnerability arise within the *WHERE* clause of a *SELECT* query.

+ *UPDATE* statements, within the updated values or the *WHERE* clause
+ *INSERT* statements, within the inserted values.
+ *SELECT* statements, within the table or column name
+ *SELECT* statements, within the ~ORDER BY~ clause
* SQL Injection examples
- retrieving hidden data
- subverting application logic
  - change query to interfere with application's logic
- UNION attacs
  - retrieve data from different database table
- Blind SQL Injection
  

** Retrieving hidden data
Consider a shopping application that displays products in different categories. When the user clicks on the Gifts category, their browser request the URL:
~https://insecure-website.com/products?category=Gifts~

And query will be like
#+begin_src sql
 SELECT * FROM products WHERE category = 'Gifts' AND released = 1
#+end_src

This query asks the database to reture:
+ all details (*)
+ from the products table
+ where the category is Gifts
+ and released is 1.
#+begin_quote
The restriction ~released = 1~ is being used to hide prodcuts that are not released. For unreleased products, presumably ~released = 0~ 
#+end_quote

*** Lab
[[https://portswigger.net/web-security/sql-injection/lab-retrieve-hidden-data][SQL injection vulnerability in WHERE clause allowing retreval of hidden data]]

+ [[https://github.com/touhidulshawan/portswigger-labs/blob/main/sql-injection/lab01.org][Solution]]

** Subverting applicaton logic 
An application lets users log in with a username and password. Example, if a user submits the username ~wiener~ and the password ~bluecheese~ the application checks the credentials by performing the following SQL query
#+begin_src sql
 SELECT * FROM users WHERE username = 'wiener' and password = 'bluecheese' 
#+end_src

If the query returns the details of a user then the login is successfull. Otherwise it is rejected

Example Submitting the username ~administrator'--~ and a blank password results in the following query
#+begin_src sql
 SELECT * FROM users WHERE username = 'administrator'--' AND password = ''
#+end_src

*** Lab
- [[https://portswigger.net/web-security/sql-injection/lab-login-bypass][SQL injection vulnerability allowing login bypass]]
- [[https://github.com/touhidulshawan/portswigger-labs/blob/main/sql-injection/lab02.org][Solution]]

** Retrieving data from other database tables
If an application executes the following query containing the user input 'Gifts'
#+begin_src sql
 SELECT name, description FROM products WHERE category = 'Gifts'
#+end_src
then attacker can submit the input
#+begin_src sql
  ' UNION SELECT username, password FROM users--
#+end_src
This will cause the application to return all usernames and passwords along with the names and description of products.

- [[./union.org][UNION ATTACK]]
